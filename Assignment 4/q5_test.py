# -*- coding: utf-8 -*-
"""Q5_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19fLBYgrxvEcH2qfm0URlFaLuEUyLMibB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import os.path
from os import path

if not path.exists('Plots/Question5/'):
    os.makedirs('Plots/Question5/')

# TODO : Write here
x = np.array([i*np.pi/180 for i in range(60,300,2)])
y = 3*x + 8 + np.random.normal(0,3,len(x))
poly=PolynomialFeatures(degree=3)
x2=poly.transform(x)
LR = LinearRegression(fit_intercept=True)
LR.fit_normal_equations(x2,y)
d=np.array([3,5,7,9])
l=[]
for i in d:
    poly=PolynomialFeatures(degree=i)
    x2=poly.transform(x)
    LR = LinearRegression(fit_intercept=True)
    LR.fit_sklearn_LR(x2,y)
    l.append(np.log(np.dot(LR.coef.T,LR.coef)))
plt.plot(d,l)
num=np.arange(10,1000,100)
err1=[]
err3=[]
err5=[]
err7=[]
err9=[]
for i in num:
    np.random.seed(45)

    x = i*np.pi/180 *(np.linspace(60,300,i))
    y = 3*x + 8 + np.random.normal(0,3,len(x))
    x=x.reshape((-1,1))
    # X[1]=X[1]*1000
    poly=PolynomialFeatures(degree=3)
    x3=poly.transform(x)
    poly=PolynomialFeatures(degree=5)
    x5=poly.transform(x)
    poly=PolynomialFeatures(degree=7)
    x7=poly.transform(x)
    poly=PolynomialFeatures(degree=9)
    x9=poly.transform(x)
    model1=LinearRegression()
    model1.fit_sklearn_LR(x,y)
    err11=np.dot(model1.coef.T,model1.coef)
    # print(model1.coef)
    err1.append(np.log(err11))
    model2=LinearRegression()
    model2.fit_sklearn_LR(x3,y)
    err11=np.dot(model2.coef.T,model2.coef)
    err3.append(np.log(err11))
    model3=LinearRegression()
    model3.fit_sklearn_LR(x5,y)
    err11=np.dot(model3.coef.T,model3.coef)
    err5.append(np.log(err11))
    model4=LinearRegression()
    model4.fit_sklearn_LR(x7,y)
    err11=np.dot(model4.coef.T,model4.coef)
    err7.append(np.log(err11))
    model5=LinearRegression()
    model5.fit_sklearn_LR(x9,y)
    err11=np.dot(model5.coef.T,model5.coef)
    err9.append(np.log(err11))
plt.plot(num,err1,label="1")
plt.plot(num,err3,label="3")
plt.plot(num,err5,label="5")
plt.plot(num,err7,label="7")
plt.plot(num,err9,label="9")
plt.legend()
plt.show()